@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "ConstructorIO";
}

@section featured {
    <script type="text/javascript">
        $.getScript("//cnstrc.com/js/ac.js", function() {
            $('#criteria').constructorAutocomplete({ key: 'je0WEjmgY2SdixsjFHtR', maxResults: 10, imageWidth: "200px"  });
        })
    </script>
    
    <div class="content-wrapper">
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>@Page.Title.</h1>
                <h2>Cloud Implementation</h2>
            </hgroup>

            <p>
                Type in some criteria to search on...
            </p>

        </div>

    </section>
    <section class="main-content">
        <div class="panel panel-default">
            <form>
                <div class="form-group">
                    
                    <input type="text" id="criteria" placeholder="Type something..."/>
                    

                </div>
            </form>
        </div>
    </section>
        
    </div>
    <script language="javascript" type="text/javascript">

        $(function() {

            var vm = function() {
                var that = this;
                that.pagingOptions = {
                    currentPage: ko.observable(1),
                    pageSizes: ko.observableArray([10]),
                    pageSize: ko.observable(10),
                    totalServerItems: ko.observable(0)};

                
                that.items = ko.observableArray();
                that.took = ko.observable(0);
                that.showResults = ko.observable(false);
                that.total = ko.observable(0);
                that.max_score = ko.observable(0);
                that.search = function () {
                    that.showResults = ko.observable(false);
                    that.criteria = $('#criteria').val();
                    that.data = {
                        size: that.pagingOptions.pageSize(),
                        from: (that.pagingOptions.pageSize()*(that.pagingOptions.currentPage()-1)),
                        query: {
                            match: {
                                '_all': that.criteria
                            }
                            
                        },
                        fields: ['_id', 'itemTitle', 'char_Manufacturer', 'char_Model', 'char_Caliber', 'char_BarrelLength', 'char_Capacity', 'char_SlideFinish', 'char_FrameFinish', 'char_Grips', '_score']
                    };

                    $.ajax({
                        url: 'http://gbtest.com:9200/gunbroker/listing/_search',
                        type: 'POST',
                        //contentType: 'application/json; charset=UTF-8',
                        crossDomain: true,
                        dataType: 'json',
                        origin: 'http://gbtest.com',
                        data: JSON.stringify(that.data),
                        success: function (response) {

                            var data = response.hits.hits;
                            that.pagingOptions.totalServerItems(response.hits.total);
                            that.took(response.took);
                            that.total(response.hits.total);
                            that.max_score(response.hits.max_score);
                            that.items.removeAll();
                            that.showResults = ko.observable(true);
                            if (data.length > 0) {
                                for (var i = 0; i < data.length; i++) {
                                    that.items.push(data[i]);
                                }
                            }
                            
                            that.items.notifySubscribers();
                            
                            $("div.kgViewport").css("height", "inherit");
                           
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            if (jqXHR!==undefined && jqXHR.responseText !== "") {
                                var jso = jQuery.parseJSON(jqXHR.responseText);

                                alert('section', 'error', '(' + jqXHR.status + ') ' + errorThrown + ' --<br />' + jso.error);
                            } else {

                            }
                        }
                    });
                }

                that.pagingOptions.pageSize.subscribe(function (data) {
            
                    that.pagingOptions.currentPage(1);
                    that.search();
                });
                that.pagingOptions.currentPage.subscribe(that.search);
            }
            
            ko.applyBindings(new vm([]));

            
            $(".kgHeaderButton").hide();
        });


    </script>

}
